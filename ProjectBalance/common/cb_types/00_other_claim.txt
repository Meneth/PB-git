## normal scopes(including posttitle scopes) ##
# ROOT = receiver
# FROM = giver
# <no scope change> = attacker or receiver
## title scopes ##
# ROOT = receiver
# FROM = giver
# <no scope change> = thirdparty landed title	
#
# the following effects/triggers exists (example execution order: on_success->on_success_title->on_success_posttitle):
# is_valid, is_valid_title, on_add, on_add_title, on_add_posttitle, on_success, on_success_title, on_success_posttitle, on_fail, on_fail_title, on_fail_posttitle, on_reverse_demand, on_reverse_demand_title, on_reverse_demand_posttitle
#
# Added on_attacker_leader_death, on_defender_leader_death and on_thirdparty_death, which all trigger when corresponding character dies
# These three all have war scopes, which currently has the following scope changes: 
# attacker, defender, thirdparty(only valid if thirdparty character is involved), thirdparty_title(only valid if thirdparty title is involved)
#
# ai_will_do: modifies value AI places on the CB compared to other CBs (default: 1)
# can_use_gui: If otherwise valid, the CB is listed in the Diplo View, but you can't declare war unless 'can_use_gui' is also valid (also shows a trigger tooltip.)


other_claim = {
	name = CB_NAME_CLAIM
	war_name = WAR_NAME_OTHER_CLAIM
	sprite = 2
	truce_days = 1825
	hostile_against_others = yes
	can_ask_to_join_war = no

	press_claim = yes
	
	can_use = {
		OR = {
			FROM = { ai = no }
			FROMFROM = { ai = no }
			FROMFROM = {
				OR = {
					trait = ambitious
					trait = wroth
					trait = envious
					trait = arbitrary
				}
				OR = {
					trait = possessed
					trait = lunatic
					NOT = {
						trait = craven
						trait = content
						trait = just
						trait = kind
					}
				}
			}
			custom_tooltip = {
				text = is_not_allied
				hidden_tooltip = {
					FROMFROM = {
						NOT = { dynasty = FROM }
						NOT = { is_close_relative = FROM }
						NOT = { any_spouse = { character = FROM } }
						NOT = { any_spouse = { is_close_relative = FROM } }
						NOT = { FROM = { any_spouse = { is_close_relative = FROMFROM } } }
					}
				}
			}
			custom_tooltip = {
				text = religious_enemy
				hidden_tooltip = {
					FROMFROM = {
						OR = {
							NOT = { religion_group = FROM }
							is_heresy_of = FROM
							is_parent_religion = FROM
							FROM = { excommunicated_for = FROMFROM }
						}
					}
				}
			}
			hidden_tooltip = { # You can't change dynasty, so no point showing it
				FROMFROM = { dynasty = 25061 } #Karlings
			}
		}
	}
	
	can_use_title = {
		FROMFROM = {
			OR = {
				NOT = { tier = emperor }
				is_close_relative = ROOT
				any_spouse = { character = ROOT }
				ai = no
			}
		}
		OR = {
			ROOT = { is_female = no }
			AND = {
				NOT = { ROOT = { religion_group = muslim } }
				NOT = { succ_law_title = { has_law = agnatic_succession } }
			}
		}
		OR = {
			FROM = {
				has_landed_title = PREV
			}
			holder_scope = {
				is_liege_or_above = FROM
			}
		}

		NOT = {
			any_war = { # when used in title scope, checks all wars for that title
				attacker = {
					character = ROOT
				}
			}
		}
		
		OR = { 
			ROOT = { has_strong_claim = PREV }
			AND = {
				ROOT = { has_weak_claim = PREV }
				OR = {
					is_pretender = yes # Checks vs ROOT character
					holder_scope = { has_regent = yes }
					AND = {
						ROOT = { is_female = no }
						holder_scope = { is_female = yes }
					}
					is_contested = yes # Is already being contested in some form of Claim or Succession War
				}
			}
		}
		
		# Cannot press others' claims for holy orders
		holy_order = no
	}

	is_valid_title = {
		OR = {
			FROM = {
				has_landed_title = PREV
			}
			holder_scope = {
				is_liege_or_above = FROM
			}
		}
		ROOT = { has_claim = PREV }
	}

	on_success = {
		hidden_tooltip = { add_character_modifier = { name = emf_victory_timer duration = 7 hidden = yes } }
		hidden_tooltip = {
			ROOT = {
				opinion = {
					modifier = pressed_my_claim 
					who = PREV
				}
			}
		}
		any_attacker = {
			limit = { character = ROOT }
			participation_scaled_prestige = 100
		}
		any_attacker = {
			limit = { NOT = { character = ROOT } }
			hidden_tooltip = { participation_scaled_prestige = 100 }
		}
		FROM = {
			prestige = -100
		}
	}

	on_success_title = {
		if = {
			limit = {
				controls_religion = yes
				holder_scope = { 
					OR = {
						religion = catholic
						religion = fraticelli
					}
				}
			}
			holder_scope = {
				abdicate_to = ROOT
			}
			if = {
				limit = {
					FROMFROM = { higher_tier_than = PREV }
				}
				ROOT = { set_defacto_liege = FROMFROM }
			}
			
			hidden_tooltip = {
				ROOT = {
					opinion = {
						modifier = pressed_my_claim 
						who = PREV
						multiplier = 2
					}
				}
			}
		}
		
		if = {
			limit = {
				OR = {
					controls_religion = no
					NOT = { 
						holder_scope = {
							OR = {
								religion = catholic 
								religion = fraticelli 
							}
						}
					}
				}
			}
			
			if = {
				limit = {
					holder_scope = {
						same_realm = FROMFROM # The current holder and the one pressing my claim are in the same larger realm
					}
				}
				ROOT = {
					set_character_flag = other_claim_tmp_flag
				}
			}
			
			if = {
				limit = {
					ROOT = {
						is_ruler = yes
						is_liege_or_above = FROMFROM # The claimant is a vassal ruler of the presser
					}
				}
				ROOT = {
					set_character_flag = claimant_is_vassal_ruler_flag
				}
			}

			usurp_title_plus_barony_if_unlanded = { target = ROOT type = claim }
			
			hidden_tooltip = {
			
				# If we were erroneously vassalized, break free
				if = {
					limit = {
						NOT = { ROOT = { has_character_flag = claimant_is_vassal_ruler_flag } }
						holder_scope = {
							is_liege_or_above = FROMFROM
						}
						NOT = { de_jure_liege_or_above = FROMFROM }
						ROOT = {
							NOT = { dynasty = FROMFROM }
						}
					}
					ROOT = { set_defacto_liege = ROOT }
				}
			
				# try and vassalize, but only conditionally
				if = {
					limit = {
						NOT = {
							holder_scope = {
								is_liege_or_above = FROMFROM
							}
						}
						OR = {
							de_jure_liege_or_above = FROMFROM
							ROOT = { has_character_flag = claimant_is_vassal_ruler_flag }
							ROOT = {
								dynasty = FROMFROM
							}
						}
					}
					ROOT = {
						set_defacto_liege = FROMFROM
					}
				}

				# check if the previous effect managed to make us part of the same realm
				# if not, we'll break the other realm
				if = {
					limit = {
						NOT = { ROOT = { has_character_flag = other_claim_tmp_flag } }
						FROM = {
							FROM = {
								top_liege = {
									ROOT = {
										top_liege = {
											NOT = {
												character = PREVPREV
											}
										}
									}
								}
							}
						}
					}
					ROOT = {
						set_defacto_liege = ROOT
					}
				}
				
				# If we have become independent from our mutual liege, restore that vassal tie
				if = {
					limit = {
						ROOT = { 
							has_character_flag = other_claim_tmp_flag 
							de_facto_liege = ROOT
						}
					}
					FROM = {
						FROM = {
							top_liege = {
								ROOT = { 
									set_defacto_liege = PREV
								}
							}
						}
					}
				}
				
				ROOT = { 
					clr_character_flag = other_claim_tmp_flag 
					clr_character_flag = claimant_is_vassal_ruler_flag 
				}
			}
		}
		
		if = {
			limit = {
				higher_tier_than = BARON
				NOT = { culture = ROOT }
			}
			hidden_tooltip = { conquest_culture = ROOT }
		}
	}

	on_fail_title = {
		ROOT = {
			prestige = -100
		}
		FROM = {
			FROM = {
				prestige = -100
			}
		}
		
		any_defender = {
			limit = { character = FROM }
			participation_scaled_prestige = 100
		}
		any_defender = {
			limit = { NOT = { character = FROM } }
			hidden_tooltip = { participation_scaled_prestige = 100 }
		}
	}

	on_reverse_demand = {
		hidden_tooltip = { FROM = { add_character_modifier = { name = emf_victory_timer duration = 7 hidden = yes } } }
		prestige = -150
		transfer_scaled_wealth = {
			to = FROM
			value = 4.0
		}
		ROOT = {
			prestige = -150
			imprison = FROM
		}
		any_defender = {
			limit = { character = FROM }
			participation_scaled_prestige = 150
		}
		any_defender = {
			limit = { NOT = { character = FROM } }
			hidden_tooltip = { participation_scaled_prestige = 150 }
		}
	}

	on_reverse_demand_title = {
		ROOT = {
			remove_claim = PREV
		}
	}

	attacker_ai_victory_worth = {
		factor = -1 # always accept
	}
	
	attacker_ai_defeat_worth = {
		factor = 100
	}

	defender_ai_victory_worth = {
		factor = -1 # always accept
	}
	
	defender_ai_defeat_worth = {
		factor = 100
	}
	
	# ai importance placed on this CB: scope is the targeted title, ROOT is the attacking character, FROM is the defending character
	ai_will_do = { 
		factor = 1
		
		modifier = {
			factor = 10
			FROM = { ai = no }
		}
	}
}
