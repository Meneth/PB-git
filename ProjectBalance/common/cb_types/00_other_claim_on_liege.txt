## normal scopes(including posttitle scopes) ##
# ROOT = receiver
# FROM = giver
# <no scope change> = attacker or receiver
## title scopes ##
# ROOT = receiver
# FROM = giver
# <no scope change> = thirdparty landed title	
#
# the following effects/triggers exists (example execution order: on_success->on_success_title->on_success_posttitle):
# is_valid, is_valid_title, on_add, on_add_title, on_add_posttitle, on_success, on_success_title, on_success_posttitle, on_fail, on_fail_title, on_fail_posttitle, on_reverse_demand, on_reverse_demand_title, on_reverse_demand_posttitle
#
# Added on_attacker_leader_death, on_defender_leader_death and on_thirdparty_death, which all trigger when corresponding character dies
# These three all have war scopes, which currently has the following scope changes: 
# attacker, defender, thirdparty(only valid if thirdparty character is involved), thirdparty_title(only valid if thirdparty title is involved)
#
# ai_will_do: modifies value AI places on the CB compared to other CBs (default: 1)
# can_use_gui: If otherwise valid, the CB is listed in the Diplo View, but you can't declare war unless 'can_use_gui' is also valid (also shows a trigger tooltip.)


other_claim_on_liege = {
	name = CB_NAME_CLAIM
	war_name = WAR_NAME_OTHER_CLAIM
	sprite = 4
	truce_days = 1825
	hostile_against_others = yes
	can_ask_to_join_war = no

	press_claim = yes
	can_call_vassals = no
	attacker_can_call_allies = no
	major_revolt = yes
	
	can_use = {
		FROM = {
			in_revolt = no
			liege = {
				in_revolt = no
				liege = {
					in_revolt = no
				}
			}
		}
	}

	can_use_title = {
		OR = {
			ROOT = { is_female = no }
			NOT = { has_law = agnatic_succession }
			AND = {
				lower_tier_than = KING
				is_primary_holder_title = no
			}
			FROMFROM = { has_character_flag = faction_claimant_ultimatum_taken } # Faction war. Ignore claim strength.
		}

		FROM = {
			has_landed_title = PREV
		}
		
		OR = { 
			ROOT = { has_strong_claim = PREV }
			FROMFROM = { has_character_flag = faction_claimant_ultimatum_taken } # Faction war. Ignore claim strength.
			AND = {
				ROOT = { has_weak_claim = PREV }
				OR = {
					is_pretender = yes # Checks vs ROOT character
					holder_scope = { has_regent = yes }
					AND = {
						ROOT = { is_female = no }
						holder_scope = { is_female = yes }
					}
					is_contested = yes # Is already being contested in some form of Claim or Succession War
				}
			}
		}
	}
	
	is_valid_title = {
		NOT = { 
			holder_scope = { 
				character = ROOT 
			} 
		}
		OR = {
			FROM = {
				has_landed_title = PREV
			}
			holder_scope = {
				is_liege_or_above = FROM
			}
		}
		
		OR = {
			has_law = succ_feudal_elective
			ROOT = { has_claim = PREV }
		}
	
		NOT = {
			any_war = { # when used in title scope, checks all wars for that title
				attacker = {
					character = ROOT
				}
			}
		}
	}

	on_add = {
		# EMF: Adjust dynlevy laws due to realm fracture
		hidden_tooltip = { character_event = { id = emf_dynlevy.4 } }
	}
	
	on_success = {
		hidden_tooltip = { add_character_modifier = { name = emf_victory_timer duration = 7 hidden = yes } }
		
		# EMF: Adjust dynlevy laws due to realm fracture
		hidden_tooltip = { character_event = { id = emf_dynlevy.4 } }
		
		any_attacker = {
			limit = { 
				OR = {
					character = ROOT 
					character = PREV
				}
			}
			participation_scaled_prestige = 100
			hidden_tooltip = {  disband_event_forces = faction_revolters }
		}
		any_attacker = {
			limit = { 
				NOT = { character = ROOT } 
				NOT = { character = PREV }
			}
			hidden_tooltip = { 
				participation_scaled_prestige = 100 
				disband_event_forces = faction_revolters
			}
		}
		ROOT = {
			opinion = {
				modifier = pressed_my_claim 
				who = PREV
			}
		}

		FROM = {
			hidden_tooltip = { disband_event_forces = faction_loyalists }
			
			if = {
				limit = {
					NOT = { has_character_modifier = ca_revoke_cooldown }
					any_demesne_title = {
						higher_tier_than = duke
						OR = {
							NOT = { has_law = crown_levies_0 }
							NOT = { has_law = revokation_0 }
							NOT = { has_law = inheritance_0 }
							AND = {
								NOT = { has_law = king_peace_0 }
								NOT = { has_law = emperor_peace_0 }
							}
						}
					}
				}
				
				any_demesne_title = { # All titles
					limit = { higher_tier_than = duke }
					
					if = {
						limit = {
							OR = {
								has_law = king_peace_0
								has_law = emperor_peace_0
							}
							has_law = revokation_0
							has_law = crown_levies_0
							NOT = { has_law = inheritance_0 }
						}
						add_law = inheritance_0
					}
					if = {
						limit = {
							has_law = crown_levies_1
							OR = {
								has_law = king_peace_0
								has_law = emperor_peace_0
							}
							has_law = revokation_0
						}
						add_law = crown_levies_0
					}
					if = {
						limit = {
							has_law = crown_levies_2
							OR = {
								has_law = king_peace_0
								has_law = emperor_peace_0
							}
							has_law = revokation_0
						}
						add_law = crown_levies_1
					}
					if = {
						limit = {
							has_law = crown_levies_3
							OR = {
								has_law = king_peace_0
								has_law = emperor_peace_0
							}
							has_law = revokation_0
						}
						add_law = crown_levies_2
					}
					if = {
						limit = {
							has_law = crown_levies_4
							OR = {
								has_law = king_peace_0
								has_law = emperor_peace_0
							}
							has_law = revokation_0
						}
						add_law = crown_levies_3
					}
					if = {
						limit = {
							OR = {
								has_law = revokation_1
								has_law = revokation_2
							}
							OR = {
								has_law = king_peace_0
								has_law = emperor_peace_0
							}
						}
						add_law = revokation_0
					}
					if = {
						limit = {
							OR = {
								has_law = king_peace_1
								has_law = king_peace_2
							}
						}
						add_law = king_peace_0
					}
					if = {
						limit = {
							OR = {
								has_law = emperor_peace_1
								has_law = emperor_peace_2
							}
						}
						add_law = emperor_peace_0
					}
				} # END: All titles

				custom_tooltip = {
					text = ca_revoke_cooldown_ctt
					hidden_tooltip = {
						add_character_modifier = {
							name = ca_revoke_cooldown
							duration = 5475
							inherit = yes
						}
					}
				}
			}
		}
		
		if = {
			limit = {
				ROOT = {
					prisoner = yes
					host = { character = FROM  }
				}
			}
			ROOT = { prisoner = no }
		}
	}
	
	on_success_title = {
		if = {
			limit = {
				is_primary_holder_title = yes
			}
			hidden_tooltip = {
				FROM = { set_character_flag = temp_other_claim_on_liege_prison }
			}
		}
		
		# If the claimant has the wrong government type, take care of that first.
		if = {
			limit = {
				higher_tier_than = ROOT
				holder_scope = {
					is_feudal = yes
				}
				ROOT = {
					is_ruler = yes
					OR = {
						is_theocracy = yes
						is_republic = yes
					}
				}
			}
			ROOT = { abdicate = yes }
		}
		
		usurp_title_plus_barony_if_unlanded_and_vassals = { target = ROOT type = claim }
		
		if = {
			limit = {
				higher_tier_than = BARON
				NOT = { culture = ROOT }
			}
			hidden_tooltip = { conquest_culture = ROOT }
		}
	}

	on_success_posttitle = {
		hidden_tooltip = {
			if = {
				limit = {
					top_liege = {
						ROOT = {
							NOT = {
								top_liege = {
									character = PREVPREV
								}
							}
						}
					}
				}

				ROOT = {
					set_defacto_liege = PREV
				}
			}

			if = {
				limit = {
					top_liege = {
						ROOT = {
							NOT = {
								top_liege = {
									character = PREVPREV
								}
							}
						}
					}
				}

				ROOT = {
					set_defacto_liege = ROOT
				}
			}
			
			if = {
				limit = {
					FROM = { 
						has_character_flag = temp_other_claim_on_liege_prison 
						lower_tier_than = PREV
					}
				}
				FROM = { 
					imprison = ROOT
				}
			}
			FROM = { clr_character_flag = temp_other_claim_on_liege_prison }
		}
	}

	on_fail = {
		# EMF: Adjust dynlevy laws due to realm fracture
		hidden_tooltip = { character_event = { id = emf_dynlevy.4 } }
		
		prestige = -100
		
		imprison = FROM
		#if = {
		#	limit = {
		#		OR = {
		#			is_liege_of = ROOT
		#			ROOT = { is_liege_or_above = FROM }
		#		}
		#	}
		#	ROOT = {
		#		imprison = FROM
		#	}
		#}
		
		any_defender = {
			limit = { character = FROM }
			participation_scaled_prestige = 50
		}
		any_defender = {
			limit = { NOT = { character = FROM } }
			hidden_tooltip = { participation_scaled_prestige = 50 }
		}
		
		hidden_tooltip = {
			any_attacker = {
				disband_event_forces = faction_revolters
			}
		}
		
		FROM = { hidden_tooltip = { disband_event_forces = faction_loyalists } }
	}

	on_reverse_demand = {
		# EMF: Adjust dynlevy laws due to realm fracture
		hidden_tooltip = { character_event = { id = emf_dynlevy.4 } }
		
		hidden_tooltip = { FROM = { add_character_modifier = { name = emf_victory_timer duration = 7 hidden = yes } } }
		
		prestige = -200
		imprison = FROM

		#if = {
		#	limit = {
		#		OR = {
		#			is_liege_of = ROOT
		#			ROOT = { is_liege_or_above = FROM }
		#		}
		#	}
		#	ROOT = {
		#		imprison = FROM
		#	}
		#}
		
		any_defender = {
			limit = { character = FROM }
			participation_scaled_prestige = 100
		}
		any_defender = {
			limit = { NOT = { character = FROM } }
			hidden_tooltip = { participation_scaled_prestige = 100 }
		}
		
		hidden_tooltip = {
			any_attacker = {
				limit = { liege = { character = FROM } }
				disband_event_forces = faction_revolters
				prisoner = FROM
			}
		}
		
		FROM = { hidden_tooltip = { disband_event_forces = faction_loyalists } }
	}
	
	attacker_ai_victory_worth = {
		factor = -1 # always accept
	}
	
	attacker_ai_defeat_worth = {
		factor = 100
	}

	defender_ai_victory_worth = {
		factor = -1 # always accept
	}
	
	defender_ai_defeat_worth = {
		factor = 100
	}
	
	is_valid = {
		OR = {
			liege = {
				character = PREV # either independent
			}
			liege = { 
				FROM = { 
					is_liege_or_above = PREV # or have shared liege
				}
			}
		}
	}
	
	# ai importance placed on this CB: scope is the targeted title, ROOT is the attacking character, FROM is the defending character
	ai_will_do = { 
		factor = 1
		
		modifier = {
			factor = 10
			FROM = { ai = no }
		}
	}
}
